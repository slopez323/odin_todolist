(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Sarina&family=Bebas+Neue&family=Yanone+Kaffeesatz:wght@200;500&display=swap);"]),i.push([e.id,":root {\n    font-size: 16px;\n}\n\nbody {\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n.popup-container {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: #eaeaea49;\n\n    display: none;\n}\n\n.popup {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #eaeaea;\n    width: 30rem;\n    max-width: 80vw;\n    height: max-content;\n    max-height: 80vh;\n    border-radius: 10px;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n    padding: 1.5rem 2.5rem;\n    overflow-y: auto;\n    color: #39739d;\n\n    display: grid;\n    gap: .8rem;\n}\n\n.popup label {\n    font-family: 'Bebas Neue', cursive;\n\n    display: flex;\n    flex-direction: column;\n}\n\n#project {\n    grid-row: 2;\n    grid-column: 1;\n}\n\n.popup label[for=\"project\"].showField {\n    display: grid;\n    grid-template-columns: auto 1fr;\n}\n\ninput,\nselect,\ntextarea{\n    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    outline: none;\n    border: none;\n    padding: .25rem;\n}\n\n#newProjInput {\n    display: none;\n    grid-column: 2;\n    grid-row: 2;\n}\n\n#newProjInput.showField {\n    display: block;\n}\n\n#newProjInput.missing,\n#title.missing {\n    border: 1px solid #800e14c7;\n}\n\n.popup textarea {\n    resize: none;\n}\n\n.popup button {\n    justify-self: center;\n\n    background: #6d2e46;\n    border: 1px solid #6d2e46;\n    border-radius: 6px;\n    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;\n    box-sizing: border-box;\n    color: #FFFFFF;\n    cursor: pointer;\n    display: inline-block;\n    font-family: nunito, roboto, proxima-nova, \"proxima nova\", sans-serif;\n    font-size: 16px;\n    font-weight: 800;\n    line-height: 16px;\n    min-height: 40px;\n    outline: 0;\n    padding: 12px 14px;\n    text-align: center;\n    text-rendering: geometricprecision;\n    text-transform: none;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n    vertical-align: middle;\n}\n\n.popup button:hover,\n.popup button:active {\n    background-color: initial;\n    background-position: 0 0;\n    color: #6d2e46;\n}\n\n.popup button:active {\n    opacity: .5;\n}\n\n#edit{\n    display: none;\n    background-color:#00798c;\n    border-color: #00798c;\n}\n\n#edit:hover,\n#edit:active {\n    color: #00798c;\n    background-color: #eaeaea;\n}\n\n.container {\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto 1fr auto;\n}\n\nheader {\n    grid-column: 1/3;\n    padding: 1.2rem 1rem;\n    background-color: #a26769;\n    color: #ece2d0;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nh1 {\n    margin: 0;\n    font-family: 'Sarina', cursive;\n}\n\n.today {\n    font-family: 'Bebas Neue', cursive;\n    font-size: 1.2rem;\n}\n\n.sidebar {\n    grid-row: 2;\n    padding: 1rem .8rem;\n    background-color: #ece2d0;\n    color: #202c39;\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 500;\n\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nh3 {\n    font-size: 1.5rem;\n    margin: 1rem 0 0.5rem;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.sidebar ul {\n    margin: 0;\n    padding: 0;\n}\n\n.nav-proj+ul {\n    flex: 1;\n}\n\n.sidebar li {\n    list-style: none;\n    color: #4f6d7a;\n    padding: .25rem .5rem;\n    font-size: 1.1rem;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n}\n\n.sidebar input {\n    width: 90%;\n}\n\n.sidebar span{\n    overflow: auto;\n}\n\n.sidebar i{\n    color: #c0c0c0;\n    font-size: .8em;\n    align-self: start;\n}\n\ni.fa-circle-plus{\n    color: #202c39;\n}\n\nmain {\n    grid-column: 2;\n    grid-row: 2;\n    padding: 1rem;\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 500;\n    font-size: 1.2rem;\n}\n\nmain select{\n    border: none;\n    outline: none;\n    font-size: .8rem;\n    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: #959393;\n    padding-bottom: .2rem;\n    margin: 0 .8rem .8rem 0;\n    border-bottom:1px solid #c0c0c0;\n}\n\nmain ul {\n    padding: 0;\n    margin: 0;\n\n    display: grid;\n    gap: 5px;\n}\n\nmain li {\n    list-style: none;\n    padding: .5rem;\n    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n    border-radius: 3px;\n}\n\n.list-title {\n    display: grid;\n    grid-template-columns: auto 1fr auto auto;\n    align-items: center;\n}\n\n.list-title i{\n    font-size: 1rem;\n    margin: 0 5px;\n    align-self: start;\n}\n\n.list-title i:last-child{\n    color:#c0c0c0;\n    font-size: .8rem;\n    align-self: center;\n}\n\n.completed{\n    color: #036666;\n}\n\nmain li.high {\n    border-left: 3px solid #c81d25;\n}\n\nmain li.med {\n    border-left: 3px solid #edae49;\n}\n\nmain li.low {\n    border-left: 3px solid #00798c;\n}\n\n.list-due {\n    font-size: .9rem;\n    margin-right: 5px;\n}\n\n.list-due.high {\n    color: #c81d25;\n}\n\n.list-due.med {\n    color: #edae49;\n}\n\n.list-due.low {\n    color: #00798c;\n}\n\n.no-tasks {\n    display: none;\n    width: 100%;\n    height: 100%;\n    font-size: 3rem;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.newTask {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: 1rem;\n    letter-spacing: 2px;\n    text-decoration: none;\n    text-transform: uppercase;\n    color: #000;\n    cursor: pointer;\n    border: 3px solid;\n    padding: 0.25em 0.5em;\n    box-shadow: 1px 1px 0px 0px, 2px 2px 0px 0px, 3px 3px 0px 0px, 4px 4px 0px 0px, 5px 5px 0px 0px;\n    position: relative;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n}\n\n.sidebar .newTask {\n    font-size: .7rem;\n    letter-spacing: 1px;\n    padding: 0.25rem 2rem;\n    max-width: 155px;\n}\n\n.newTask:active {\n    box-shadow: 0px 0px 0px 0px;\n    top: 5px;\n    left: 5px;\n}\n\n.done {\n    color: #036666;\n}\n\nli.current-view {\n    background-color: #c2dfe3;\n}\n\n.details {\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 200;\n    font-size: .7em;\n    color:#036666;\n    text-transform: uppercase;\n}\n\n.details p {\n    display: grid;\n    grid-template-columns: 5rem 1fr;\n}\n\n.detail-text {\n    font-weight: 500;\n    color: #202c39;\n    font-size: 1.2em;\n    text-transform: none;\n}\n\np.detail-actions {\n    display: flex;\n    justify-content: end;\n    gap: 5px;\n    font-size: 1em;\n    text-decoration: underline;\n    color: #4f6d7a;\n}\n\nfooter {\n    grid-column: 1/3;\n    background-color: #cebebe;\n    padding: .8rem;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n    color: #283845;\n}\n\n@media (min-width: 768px) {\n    .newTask {\n        padding: 0.25em 0.75em;\n    }\n}\n\n@media (hover: hover) {\n    .newTask:hover {\n        transform: scale(1.01);\n    }\n\n    .addProject:hover {\n        cursor: pointer;\n        opacity: .5;\n    }\n\n    .done:hover {\n        cursor: pointer;\n    }\n\n    li:hover {\n        cursor: pointer;\n    }\n    i.fa-trash:hover{\n        color: #800e13;\n    };\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Sarina&family=Bebas+Neue&family=Yanone+Kaffeesatz:wght@200;500&display=swap');\n\n:root {\n    font-size: 16px;\n}\n\nbody {\n    margin: 0;\n    height: 100vh;\n    width: 100vw;\n}\n\n.popup-container {\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    background-color: #eaeaea49;\n\n    display: none;\n}\n\n.popup {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #eaeaea;\n    width: 30rem;\n    max-width: 80vw;\n    height: max-content;\n    max-height: 80vh;\n    border-radius: 10px;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 2px 5px -1px, rgba(0, 0, 0, 0.3) 0px 1px 3px -1px;\n    padding: 1.5rem 2.5rem;\n    overflow-y: auto;\n    color: #39739d;\n\n    display: grid;\n    gap: .8rem;\n}\n\n.popup label {\n    font-family: 'Bebas Neue', cursive;\n\n    display: flex;\n    flex-direction: column;\n}\n\n#project {\n    grid-row: 2;\n    grid-column: 1;\n}\n\n.popup label[for=\"project\"].showField {\n    display: grid;\n    grid-template-columns: auto 1fr;\n}\n\ninput,\nselect,\ntextarea{\n    font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    outline: none;\n    border: none;\n    padding: .25rem;\n}\n\n#newProjInput {\n    display: none;\n    grid-column: 2;\n    grid-row: 2;\n}\n\n#newProjInput.showField {\n    display: block;\n}\n\n#newProjInput.missing,\n#title.missing {\n    border: 1px solid #800e14c7;\n}\n\n.popup textarea {\n    resize: none;\n}\n\n.popup button {\n    justify-self: center;\n\n    background: #6d2e46;\n    border: 1px solid #6d2e46;\n    border-radius: 6px;\n    box-shadow: rgba(0, 0, 0, 0.1) 1px 2px 4px;\n    box-sizing: border-box;\n    color: #FFFFFF;\n    cursor: pointer;\n    display: inline-block;\n    font-family: nunito, roboto, proxima-nova, \"proxima nova\", sans-serif;\n    font-size: 16px;\n    font-weight: 800;\n    line-height: 16px;\n    min-height: 40px;\n    outline: 0;\n    padding: 12px 14px;\n    text-align: center;\n    text-rendering: geometricprecision;\n    text-transform: none;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n    vertical-align: middle;\n}\n\n.popup button:hover,\n.popup button:active {\n    background-color: initial;\n    background-position: 0 0;\n    color: #6d2e46;\n}\n\n.popup button:active {\n    opacity: .5;\n}\n\n#edit{\n    display: none;\n    background-color:#00798c;\n    border-color: #00798c;\n}\n\n#edit:hover,\n#edit:active {\n    color: #00798c;\n    background-color: #eaeaea;\n}\n\n.container {\n    height: 100%;\n    width: 100%;\n\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: auto 1fr auto;\n}\n\nheader {\n    grid-column: 1/3;\n    padding: 1.2rem 1rem;\n    background-color: #a26769;\n    color: #ece2d0;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nh1 {\n    margin: 0;\n    font-family: 'Sarina', cursive;\n}\n\n.today {\n    font-family: 'Bebas Neue', cursive;\n    font-size: 1.2rem;\n}\n\n.sidebar {\n    grid-row: 2;\n    padding: 1rem .8rem;\n    background-color: #ece2d0;\n    color: #202c39;\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 500;\n\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nh3 {\n    font-size: 1.5rem;\n    margin: 1rem 0 0.5rem;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.sidebar ul {\n    margin: 0;\n    padding: 0;\n}\n\n.nav-proj+ul {\n    flex: 1;\n}\n\n.sidebar li {\n    list-style: none;\n    color: #4f6d7a;\n    padding: .25rem .5rem;\n    font-size: 1.1rem;\n\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n}\n\n.sidebar input {\n    width: 90%;\n}\n\n.sidebar span{\n    overflow: auto;\n}\n\n.sidebar i{\n    color: #c0c0c0;\n    font-size: .8em;\n    align-self: start;\n}\n\ni.fa-circle-plus{\n    color: #202c39;\n}\n\nmain {\n    grid-column: 2;\n    grid-row: 2;\n    padding: 1rem;\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 500;\n    font-size: 1.2rem;\n}\n\nmain select{\n    border: none;\n    outline: none;\n    font-size: .8rem;\n    font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n    color: #959393;\n    padding-bottom: .2rem;\n    margin: 0 .8rem .8rem 0;\n    border-bottom:1px solid #c0c0c0;\n}\n\nmain ul {\n    padding: 0;\n    margin: 0;\n\n    display: grid;\n    gap: 5px;\n}\n\nmain li {\n    list-style: none;\n    padding: .5rem;\n    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 2px 0px;\n    border-radius: 3px;\n}\n\n.list-title {\n    display: grid;\n    grid-template-columns: auto 1fr auto auto;\n    align-items: center;\n}\n\n.list-title i{\n    font-size: 1rem;\n    margin: 0 5px;\n    align-self: start;\n}\n\n.list-title i:last-child{\n    color:#c0c0c0;\n    font-size: .8rem;\n    align-self: center;\n}\n\n.completed{\n    color: #036666;\n}\n\nmain li.high {\n    border-left: 3px solid #c81d25;\n}\n\nmain li.med {\n    border-left: 3px solid #edae49;\n}\n\nmain li.low {\n    border-left: 3px solid #00798c;\n}\n\n.list-due {\n    font-size: .9rem;\n    margin-right: 5px;\n}\n\n.list-due.high {\n    color: #c81d25;\n}\n\n.list-due.med {\n    color: #edae49;\n}\n\n.list-due.low {\n    color: #00798c;\n}\n\n.no-tasks {\n    display: none;\n    width: 100%;\n    height: 100%;\n    font-size: 3rem;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.newTask {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: 1rem;\n    letter-spacing: 2px;\n    text-decoration: none;\n    text-transform: uppercase;\n    color: #000;\n    cursor: pointer;\n    border: 3px solid;\n    padding: 0.25em 0.5em;\n    box-shadow: 1px 1px 0px 0px, 2px 2px 0px 0px, 3px 3px 0px 0px, 4px 4px 0px 0px, 5px 5px 0px 0px;\n    position: relative;\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: manipulation;\n}\n\n.sidebar .newTask {\n    font-size: .7rem;\n    letter-spacing: 1px;\n    padding: 0.25rem 2rem;\n    max-width: 155px;\n}\n\n.newTask:active {\n    box-shadow: 0px 0px 0px 0px;\n    top: 5px;\n    left: 5px;\n}\n\n.done {\n    color: #036666;\n}\n\nli.current-view {\n    background-color: #c2dfe3;\n}\n\n.details {\n    font-family: 'Yanone Kaffeesatz', sans-serif;\n    font-weight: 200;\n    font-size: .7em;\n    color:#036666;\n    text-transform: uppercase;\n}\n\n.details p {\n    display: grid;\n    grid-template-columns: 5rem 1fr;\n}\n\n.detail-text {\n    font-weight: 500;\n    color: #202c39;\n    font-size: 1.2em;\n    text-transform: none;\n}\n\np.detail-actions {\n    display: flex;\n    justify-content: end;\n    gap: 5px;\n    font-size: 1em;\n    text-decoration: underline;\n    color: #4f6d7a;\n}\n\nfooter {\n    grid-column: 1/3;\n    background-color: #cebebe;\n    padding: .8rem;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n    color: #283845;\n}\n\n@media (min-width: 768px) {\n    .newTask {\n        padding: 0.25em 0.75em;\n    }\n}\n\n@media (hover: hover) {\n    .newTask:hover {\n        transform: scale(1.01);\n    }\n\n    .addProject:hover {\n        cursor: pointer;\n        opacity: .5;\n    }\n\n    .done:hover {\n        cursor: pointer;\n    }\n\n    li:hover {\n        cursor: pointer;\n    }\n    i.fa-trash:hover{\n        color: #800e13;\n    };\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var A=t(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)n[A].references++,n[A].updater(m);else{var p=o(m,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),s=t.n(c),l=t(216),d=t.n(l),u=t(589),A=t.n(u),m=t(426),p={};p.styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),n()(m.Z,p),m.Z&&m.Z.locals&&m.Z.locals;const f=e=>{const n=e.parentNode.getAttribute("data-id"),t=je.findIndex((e=>e.id==n));je.splice(t,1),He();const r=document.querySelector(".current-view").id;document.getElementById(r).click()},g=e=>{const n=e.textContent,t=h.findIndex((e=>e==n));h.splice(t,1),y(),je=je.filter((e=>e.projectName!=n)),He(),qe()},h=JSON.parse(localStorage.getItem("projList"))||[],y=()=>{localStorage.setItem("projList",JSON.stringify(h))},C=()=>{const e=document.getElementById("project"),n=document.querySelector('option[value="newProject"');for(;e.querySelectorAll("option").length>1;)e.querySelector("option").remove();h.forEach(((t,r)=>{const o=document.createElement("option");o.setAttribute("value",`proj${r}`),o.textContent=t,e.insertBefore(o,n)}))},v=()=>{document.querySelectorAll(".nav-proj span").forEach((e=>{e.removeEventListener("click",ze)})),document.querySelectorAll(".sidebar .fa-trash").forEach((e=>{e.removeEventListener("click",g)})),document.querySelectorAll(".nav-proj+ul span").forEach((e=>{e.addEventListener("click",(()=>ze(e.parentNode)))})),document.querySelectorAll(".sidebar .fa-trash").forEach((e=>{e.addEventListener("click",(()=>g(e.parentNode)))}))},B=e=>{h.push(e),C(),y(),document.querySelector(".projInput")&&document.querySelector(".projInput").remove(),qe()},I=()=>{"newProject"==document.getElementById("project").value?(document.querySelector('label[for="project"]').classList.add("showField"),document.getElementById("newProjInput").classList.add("showField"),document.getElementById("newProjInput").focus()):(document.querySelector('label[for="project"]').classList.remove("showField"),document.getElementById("newProjInput").classList.remove("showField"))},b=e=>{const n=e.querySelector("i"),t=e.parentNode.getAttribute("data-id"),r=je.find((e=>e.id==t));n.classList.contains("completed")?(n.classList.remove("fa-solid","fa-circle-check","completed"),n.classList.add("fa-regular","fa-circle"),r.status="open"):(n.classList.remove("fa-regular","fa-circle"),n.classList.add("fa-solid","fa-circle-check","completed"),r.status="completed"),He();const o=document.querySelector(".current-view").id;document.getElementById(o).click()};function w(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function x(e){return w(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function E(e){w(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function S(e){if(w(1,arguments),!x(e)&&"number"!=typeof e)return!1;var n=E(e);return!isNaN(Number(n))}var k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function T(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,r=e.formats[t]||e.formats[e.defaultWidth];return r}}const j={date:T({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:T({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:T({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var q={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(e){return function(n,t){var r,o=t||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var c=e.defaultWidth,s=o.width?String(o.width):e.defaultWidth;r=e.values[s]||e.values[c]}return r[e.argumentCallback?e.argumentCallback(n):n]}}const L={ordinalNumber:function(e,n){var t=Number(e),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function D(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=n.match(o);if(!a)return null;var i,c=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?z(s,(function(e){return e.test(c)})):P(s,(function(e){return e.test(c)}));i=e.valueCallback?e.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var d=n.slice(c.length);return{value:i,rest:d}}}function P(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function z(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var U,W={ordinalNumber:(U={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(U.matchPattern);if(!t)return null;var r=t[0],o=e.match(U.parsePattern);if(!o)return null;var a=U.valueCallback?U.valueCallback(o[0]):o[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(r.length);return{value:a,rest:i}}),era:D({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:D({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:D({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:D({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:D({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Y={code:"en-US",formatDistance:function(e,n,t){var r,o=k[e];return r="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:j,formatRelative:function(e,n,t,r){return q[e]},localize:L,match:W,options:{weekStartsOn:0,firstWeekContainsDate:1}};function N(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function F(e,n){w(2,arguments);var t=E(e).getTime(),r=N(n);return new Date(t+r)}function O(e,n){w(2,arguments);var t=N(n);return F(e,-t)}var Q=864e5;function H(e){w(1,arguments);var n=1,t=E(e),r=t.getUTCDay(),o=(r<n?7:0)+r-n;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function G(e){w(1,arguments);var n=E(e),t=n.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=H(r),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=H(a);return n.getTime()>=o.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function R(e){w(1,arguments);var n=G(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var r=H(t);return r}var X=6048e5;function J(e,n){w(1,arguments);var t=n||{},r=t.locale,o=r&&r.options&&r.options.weekStartsOn,a=null==o?0:N(o),i=null==t.weekStartsOn?a:N(t.weekStartsOn);if(!(i>=0&&i<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=E(e),s=c.getUTCDay(),l=(s<i?7:0)+s-i;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function Z(e,n){w(1,arguments);var t=E(e),r=t.getUTCFullYear(),o=n||{},a=o.locale,i=a&&a.options&&a.options.firstWeekContainsDate,c=null==i?1:N(i),s=null==o.firstWeekContainsDate?c:N(o.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,s),l.setUTCHours(0,0,0,0);var d=J(l,n),u=new Date(0);u.setUTCFullYear(r,0,s),u.setUTCHours(0,0,0,0);var A=J(u,n);return t.getTime()>=d.getTime()?r+1:t.getTime()>=A.getTime()?r:r-1}function $(e,n){w(1,arguments);var t=n||{},r=t.locale,o=r&&r.options&&r.options.firstWeekContainsDate,a=null==o?1:N(o),i=null==t.firstWeekContainsDate?a:N(t.firstWeekContainsDate),c=Z(e,n),s=new Date(0);s.setUTCFullYear(c,0,i),s.setUTCHours(0,0,0,0);var l=J(s,n);return l}var K=6048e5;function _(e,n){for(var t=e<0?"-":"",r=Math.abs(e).toString();r.length<n;)r="0"+r;return t+r}const V=function(e,n){var t=e.getUTCFullYear(),r=t>0?t:1-t;return _("yy"===n?r%100:r,n.length)},ee=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):_(t+1,2)},ne=function(e,n){return _(e.getUTCDate(),n.length)},te=function(e,n){return _(e.getUTCHours()%12||12,n.length)},re=function(e,n){return _(e.getUTCHours(),n.length)},oe=function(e,n){return _(e.getUTCMinutes(),n.length)},ae=function(e,n){return _(e.getUTCSeconds(),n.length)},ie=function(e,n){var t=n.length,r=e.getUTCMilliseconds();return _(Math.floor(r*Math.pow(10,t-3)),n.length)};var ce={G:function(e,n,t){var r=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var r=e.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return V(e,n)},Y:function(e,n,t,r){var o=Z(e,r),a=o>0?o:1-o;return"YY"===n?_(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):_(a,n.length)},R:function(e,n){return _(G(e),n.length)},u:function(e,n){return _(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(r);case"QQ":return _(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,n,t){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(r);case"qq":return _(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,n,t){var r=e.getUTCMonth();switch(n){case"M":case"MM":return ee(e,n);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(e,n,t){var r=e.getUTCMonth();switch(n){case"L":return String(r+1);case"LL":return _(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,t,r){var o=function(e,n){w(1,arguments);var t=E(e),r=J(t,n).getTime()-$(t,n).getTime();return Math.round(r/K)+1}(e,r);return"wo"===n?t.ordinalNumber(o,{unit:"week"}):_(o,n.length)},I:function(e,n,t){var r=function(e){w(1,arguments);var n=E(e),t=H(n).getTime()-R(n).getTime();return Math.round(t/X)+1}(e);return"Io"===n?t.ordinalNumber(r,{unit:"week"}):_(r,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):ne(e,n)},D:function(e,n,t){var r=function(e){w(1,arguments);var n=E(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var r=n.getTime(),o=t-r;return Math.floor(o/Q)+1}(e);return"Do"===n?t.ordinalNumber(r,{unit:"dayOfYear"}):_(r,n.length)},E:function(e,n,t){var r=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return _(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(e,n,t,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return _(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(e,n,t){var r=e.getUTCDay(),o=0===r?7:r;switch(n){case"i":return String(o);case"ii":return _(o,n.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(e,n,t){var r=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,n,t){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,n,t){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var r=e.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return te(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):re(e,n)},K:function(e,n,t){var r=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(r,{unit:"hour"}):_(r,n.length)},k:function(e,n,t){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===n?t.ordinalNumber(r,{unit:"hour"}):_(r,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):oe(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):ae(e,n)},S:function(e,n){return ie(e,n)},X:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(n){case"X":return le(o);case"XXXX":case"XX":return de(o);default:return de(o,":")}},x:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"x":return le(o);case"xxxx":case"xx":return de(o);default:return de(o,":")}},O:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+se(o,":");default:return"GMT"+de(o,":")}},z:function(e,n,t,r){var o=(r._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+se(o,":");default:return"GMT"+de(o,":")}},t:function(e,n,t,r){var o=r._originalDate||e;return _(Math.floor(o.getTime()/1e3),n.length)},T:function(e,n,t,r){return _((r._originalDate||e).getTime(),n.length)}};function se(e,n){var t=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return t+String(o);var i=n||"";return t+String(o)+i+_(a,2)}function le(e,n){return e%60==0?(e>0?"-":"+")+_(Math.abs(e)/60,2):de(e,n)}function de(e,n){var t=n||"",r=e>0?"-":"+",o=Math.abs(e);return r+_(Math.floor(o/60),2)+t+_(o%60,2)}const ue=ce;function Ae(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}}function me(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}}const pe={p:me,P:function(e,n){var t,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return Ae(e,n);switch(o){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",Ae(o,n)).replace("{{time}}",me(a,n))}};function fe(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ge=["D","DD"],he=["YY","YYYY"];function ye(e){return-1!==ge.indexOf(e)}function Ce(e){return-1!==he.indexOf(e)}function ve(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var Be=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ie=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,be=/^'([^]*?)'?$/,we=/''/g,xe=/[a-zA-Z]/;function Ee(e,n,t){w(2,arguments);var r=String(n),o=t||{},a=o.locale||Y,i=a.options&&a.options.firstWeekContainsDate,c=null==i?1:N(i),s=null==o.firstWeekContainsDate?c:N(o.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=a.options&&a.options.weekStartsOn,d=null==l?0:N(l),u=null==o.weekStartsOn?d:N(o.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!a.localize)throw new RangeError("locale must contain localize property");if(!a.formatLong)throw new RangeError("locale must contain formatLong property");var A=E(e);if(!S(A))throw new RangeError("Invalid time value");var m=fe(A),p=O(A,m),f={firstWeekContainsDate:s,weekStartsOn:u,locale:a,_originalDate:A},g=r.match(Ie).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,pe[n])(e,a.formatLong,f):e})).join("").match(Be).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Se(t);var i=ue[r];if(i)return!o.useAdditionalWeekYearTokens&&Ce(t)&&ve(t,n,e),!o.useAdditionalDayOfYearTokens&&ye(t)&&ve(t,n,e),i(p,t,a.localize,f);if(r.match(xe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return g}function Se(e){return e.match(be)[1].replace(we,"'")}const ke=e=>{const n=new Date(e);return`${Ee(new Date(n),"E")}, ${Ee(new Date(n),"MMM")} ${Ee(new Date(n),"d")}`},Te=e=>`${e[2]}-${1==e[0].length?`0${e[0]}`:e[0]}-${1==e[1].length?`0${e[1]}`:e[1]}`;let je=JSON.parse(localStorage.getItem("taskList"))||[];const qe=()=>{let e=document.querySelector(".current-view").id;Pe(),C(),v(),document.querySelector(".current-view")||(e="view-all"),document.querySelector(`#${e} span`).click()},Me=e=>{e.querySelector(".details")||(e=>{const n=e.getAttribute("data-id"),t=je.find((e=>e.id==n)),r=document.createElement("div");r.classList.add("details");const o=document.createElement("p"),a=document.createElement("span"),i=document.createElement("span");i.classList.add("detail-text"),o.append(a,i);const c=document.createElement("p"),s=document.createElement("span"),l=document.createElement("span");l.classList.add("detail-text"),c.append(s,l);const d=document.createElement("p"),u=document.createElement("span"),A=document.createElement("span");A.classList.add("detail-text"),d.append(u,A);const m=document.createElement("p"),p=document.createElement("span"),f=document.createElement("span");f.classList.add("detail-text"),m.append(p,f);const g=document.createElement("p");g.classList.add("detail-actions");const h=document.createElement("span");h.textContent="Edit",h.addEventListener("click",(()=>(e=>{const n=e.getAttribute("data-id");Qe(n)})(e)));const y=document.createElement("span");y.textContent="Hide",y.addEventListener("click",(()=>{Le(e)})),a.textContent="Project",s.textContent="Description",u.textContent="Priority",p.textContent="Notes",i.textContent=t.projectName,l.textContent=t.description,A.textContent=t.priority.toUpperCase(),f.textContent=t.notes,g.append(h,y),r.append(o,c,d,m,g),e.append(r)})(e),e.querySelector(".details").style.display="block"},Le=e=>{e.querySelector(".details").style.display="none"},De=e=>{const n=document.querySelector("main ul");n.innerHTML="",null==e&&(e=je),0==e.length?(document.querySelector(".no-tasks").style.display="flex",document.querySelector(".list").style.display="none"):(document.querySelector(".no-tasks").style.display="none",document.querySelector(".list").style.display="block",e.forEach((e=>{const t=document.createElement("li"),r=document.createElement("div"),o=document.createElement("span"),a=document.createElement("span"),i=document.createElement("i"),c=document.createElement("i");"open"==e.status?i.classList.add("fa","fa-regular","fa-circle"):i.classList.add("fa","fa-solid","fa-circle-check","completed"),c.classList.add("fa","fa-solid","fa-trash"),t.classList.add(e.priority),t.setAttribute("data-id",e.id),o.textContent=e.title,r.classList.add("list-title"),a.classList.add("list-due",e.priority),a.textContent=ke(e.dueDate),r.append(i,o,a,c),t.append(r),n.append(t)})),document.querySelectorAll(".list-title i:first-child").forEach((e=>{e.removeEventListener("click",b)})),document.querySelectorAll(".list-title i:last-child").forEach((e=>{e.removeEventListener("click",f)})),document.querySelectorAll(".list-title").forEach((e=>{e.removeEventListener("click",Me)})),document.querySelectorAll(".list-title i:first-child").forEach((e=>{e.addEventListener("click",(()=>b(e.parentNode)))})),document.querySelectorAll(".list-title i:last-child").forEach((e=>{e.addEventListener("click",(()=>f(e.parentNode)))})),document.querySelectorAll(".list-title span").forEach((e=>{e.addEventListener("click",(()=>Me(e.parentNode.parentNode)))})))},Pe=()=>{const e=document.querySelector(".nav-proj+ul");e.innerHTML="",h.length>0&&h.forEach(((n,t)=>{const r=document.createElement("li"),o=document.createElement("span");o.textContent=n,r.setAttribute("id",`view-proj${t}`);const a=document.createElement("i");a.classList.add("fa","fa-solid","fa-trash"),r.append(o,a),e.append(r)}))},ze=e=>{document.querySelectorAll(".sidebar li").forEach((e=>e.classList.remove("current-view"))),e.classList.add("current-view");const n=Ne(),t=Fe(n),r=e.id;"proj"==r.substr(5,4)?Ye(r.substr(5),t):"all"==r.substr(5)?De(t):"comp"==r.substr(5)?Ue(t):"open"==r.substr(5)&&We(t)},Ue=e=>{const n=je.filter((e=>"completed"==e.status)),t=e.filter((e=>"completed"==e.status));0==t.length&&n.length>0?(De(n),document.getElementById("filter").value="default"):De(t)},We=e=>{const n=je.filter((e=>"open"==e.status)),t=e.filter((e=>"open"==e.status));0==t.length&&n.length>0?(De(n),document.getElementById("filter").value="default"):De(t)},Ye=(e,n)=>{const t=je.filter((n=>n.projectID==e)),r=n.filter((n=>n.projectID==e));0==r.length&&t.length>0?(De(t),document.getElementById("filter").value="default"):De(r)},Ne=()=>{const e=document.getElementById("sort").value,n=je.slice();return document.getElementById("sort").style.cssText="color: #a26769; font-weight: bold","asc"==e?n.sort((e=>new Date(e.dueDate.join("/")))):"desc"==e?n.sort((e=>new Date(e.dueDate.join("/")))).reverse():(document.getElementById("sort").style.cssText="",je)},Fe=e=>{const n=document.getElementById("filter").value.substr(6),t=e.slice().filter((e=>e.priority==n));return document.getElementById("filter").style.cssText="color: #a26769; font-weight: bold",0==t.length?(document.getElementById("filter").value="default",document.getElementById("filter").style.cssText="",e):t};function Oe(e,n,t,r,o,a,i,c){this.projectID=e,this.projectName=n,this.title=t,this.description=r,this.dueDate=o,this.priority=a,this.notes=i,this.status=c,this.id=je.length?je[je.length-1].id+1:1}const Qe=e=>{if(document.querySelector(".popup-container").style.display="block","object"==typeof e){if(document.getElementById("title").value="",document.getElementById("desc").value="",document.getElementById("notes").value="",document.getElementById("newProjInput").value="",document.getElementById("due").value=Te((new Date).toLocaleDateString().split("/")),"proj"==document.querySelector(".current-view").id.substr(5,4)){const e=document.querySelector(".current-view").id.substr(5);document.getElementById("project").value=e}else if(je.length>0){const e=je.map((e=>e.projectID)).sort();document.getElementById("project").value=e[e.length-1]}else if(h.length>0){const e=document.getElementById("project"),n=e.querySelectorAll("option"),t=n[n.length-2];e.value=t.getAttribute("value")}document.querySelector(".popup button").style.display="block",document.getElementById("edit").style.display="none",document.getElementById("edit").removeAttribute("data-id")}else{const n=je.find((n=>n.id==e));document.getElementById("title").value=n.title,document.getElementById("desc").value=n.description,document.getElementById("notes").value=n.notes,document.getElementById("project").value=n.projectID,document.getElementById("prio").value=n.priority,document.getElementById("due").value=Te(n.dueDate),document.querySelector(".popup button").style.display="none",document.getElementById("edit").style.display="block",document.getElementById("edit").setAttribute("data-id",e)}document.getElementById("title").classList.remove("missing"),document.getElementById("newProjInput").classList.remove("missing"),I()},He=()=>{localStorage.setItem("taskList",JSON.stringify(je))},Ge=(e,n)=>{const t=document.getElementById("newProjInput"),r=document.getElementById("title");if(t.classList.remove("missing"),r.classList.remove("missing"),t.classList.contains("showField")&&""==t.value||""==r.value)return t.classList.contains("showField")&&""==t.value&&t.classList.add("missing"),void(""==r.value&&r.classList.add("missing"));"create"==e?(()=>{const e=document.getElementById("project");let n,t=e.value;if("newProject"==t){const e=document.getElementById("newProjInput").value;B(e),n=e,qe();const r=document.querySelectorAll("#project option");t=r[r.length-2].getAttribute("value")}else n=e.options[e.selectedIndex].textContent;const r=document.querySelector("#title").value,o=document.querySelector("#desc").value,a=document.querySelector("#due").value,i=document.querySelector("#prio").value,c=document.querySelector("#notes").value,s=new Oe(t,n,r,o,[a.split("-")[1],a.split("-")[2],a.split("-")[0]],i,c,"open");je.push(s),He(),document.querySelector(".popup-container").style.display="none";const l=document.querySelector(".current-view");l.id.startsWith("view-proj")?l.querySelector("span").click():document.querySelector("#view-all span").click()})():(e=>{const n=document.getElementById("project");let t,r=n.value;if("newProject"==r){const e=document.getElementById("newProjInput").value;createProject(e),t=e,qe();const n=document.querySelectorAll("#project option");r=n[n.length-2].getAttribute("value")}else t=n.options[n.selectedIndex].textContent;const o=document.querySelector("#title").value,a=document.querySelector("#desc").value,i=document.querySelector("#due").value,c=document.querySelector("#prio").value,s=document.querySelector("#notes").value,l=[i.split("-")[1],i.split("-")[2],i.split("-")[0]],d=je.find((n=>n.id==e));d.projectID=r,d.projectName=t,d.title=o,d.description=a,d.dueDate=l,d.priority=c,d.notes=s,He(),document.querySelector(".popup-container").style.display="none";const u=document.querySelector(".current-view").id;document.getElementById(u).click()})(n)};De(),Pe(),C(),v(),(()=>{const e=ke([(new Date).getMonth()+1,(new Date).getDate(),(new Date).getFullYear()]);document.querySelector(".today").textContent=e})(),document.querySelectorAll(".nav-all+ul>li").forEach((e=>{e.addEventListener("click",(()=>ze(e)))})),document.querySelectorAll(".newTask").forEach((e=>{e.addEventListener("click",Qe)})),document.querySelector(".addProject").addEventListener("click",(()=>{const e=document.createElement("li");e.classList.add("projInput");const n=document.createElement("input"),t=document.createElement("span");t.textContent="✔︎",t.classList.add("done"),e.append(n,t),document.querySelector(".nav-proj+ul").append(e),n.focus(),t.addEventListener("click",(()=>{""!=n.value&&B(n.value)})),n.addEventListener("keypress",(e=>{"Enter"===e.key&&""!=n.value&&B(n.value)}))})),document.querySelector(".popup button").addEventListener("click",(()=>{Ge("create")})),document.getElementById("edit").addEventListener("click",(()=>{const e=document.getElementById("edit").getAttribute("data-id");Ge("edit",e)})),document.addEventListener("click",(e=>{e.target.classList.contains("popup-container")&&(document.querySelector(".popup-container").style.display="none"),e.target.classList.contains("done")||e.target.classList.contains("addProject")||document.querySelector(".projInput")&&document.querySelector(".projInput").remove()})),document.getElementById("project").addEventListener("change",I),document.querySelectorAll("main select").forEach((e=>{e.addEventListener("change",(()=>ze(document.querySelector(".current-view"))))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,